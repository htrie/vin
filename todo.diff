--- LATER
+plug dynamic resolution factor into iOS dyn res
+defer patching after engine init and during video
--- 2022-10-03
+commit
	update with Rhys changes
	test on next
	careful about mobile and bundle in package
f+add SetPack engine setting
	careful with bundle viewer and missing engine init
+use storage system for bundle input file
+check dependency-based activation on testing_next_bundled
	check after build fix
	errors where it can't find shaders
	remove all _ special cases and only package patching table
+plug sparse shaders on testing_next_bundled
--- 2022-10-01
+log/stat more which source is being accessed
--- 2022-09-30
-update next
-erase all
-rename Origins to Locations
-test on next
-update next
-check out new sinkhole lights: not there yet
-move pack
-move disk
-move locations to storage system header
-remove InputFileSource
-use std::wstring_view
-check compilation
-check iOS/Android/Console job ads
--- 2022-09-29
-check with ThomasD about bundle2 error (missing json file)
-move file provifer and file database to storage system directly
-use bool to control network file init
-check with MichaelG about PS4 fmod debug log: trying command buffer increase/decrease
-add source flags to storage system header
-remove IgnoredPath
-remove IsGathering (since bundles are deactivated when gathering)
-pass default flags to try_open
-check slow down when removing AlwaysInServer: first slow down when downloading bundles
-remove AlwaysInBundles
-unify size
-unify exists
-unify get
-code review with ThomasD
--- 2022-09-28
-rename bundle2.h/cpp to storagesystem.h/cpp
-add Internal folder
-move patching table to internal
-move network file to internal
-access network file trough storage system
-separate bundle cache from storage system and move to internal
-check with MichaelG about PS4 fmod debug log: too spammy, had to try with less logging
-update testing_next_client
-test new g4-3-2
-update testing_next_bundled when green
--- 2022-09-27
-check console builds
-ask for clean build on ps4-testing_next
-update next
-check xbox tilesheet export error: don't bump to 4k, exclude more rotations, use UTF-8
-check Sean mobile crash: add cubemap manager guard
-talk to Rhys/Dan about sub-scene enough
-check with MichaelG about fmod debug prx results: fixed debug init options and waiting for Adam
-compare vulkan fence: no, doing things the same way
-ask Anggi about counselling: book first session
-ask SamC to test with memory bar on
-bug camera far not adjusted in some mobile-areas: camera far, SamC can fix it
-ask Mark2 about new seating plan
-make another next checkout for network file: next_bundled
-ask ThomasD to enable dependency-based bundling tomorrow on testing_next_bundled only for now
-make testing_next_bundled build using network file
-update next
-rename bundle2 to storage system
--- 2022-09-25
-update next
-check new sub-scene test with environment point lights: ok
-test scale in sub-scene test: works
-fix light culling using sub-scene transforms: worked, iron manor fixed
--- 2022-09-23
-update next
-test programming sub-scene area
-check g4-3-2 possibly having too many point lights and messing with UI lighting: add bounds check
-bug point lights in other sub-scene: attached to doodads not generated yet, accepted limitation for now
-move VisibleObject to view
-remove debug camera from scene
-move camera to impl
-move light quality to impl
-move lights to impl
-move lights updates from scene cull to scene update 
-make lights update functions private
-remove camera/lights params from various lights functions
-precompute all visible lights once per frame
-check client debug compilation (Alex getting link errors): fine for me
--- 2022-09-22
-update next
-bug light still not correct in other sub-scenes
-fix entity temp uniform alloc lagging one frame behind in some cases: update gpu particles before entity swap
-review MichaelG and Fmod support request: use fmod debug prx on ps4 first
--- 2022-09-21
-make issues: rocks, blur, point lights
-update next
-make sure all mobile textures are re-exported with higher res: actually enable high-quality
-check with MichaelG about audio bug: add NaN checks, logging and use debug libs on PS4
-check ThomasD change about cpass mask check for when to flush the cpass buffer: ok
-check deadlock when minimizing window: can't repro
-ask Robert for rev url for testing_next_bundled
-update patched.exe on svn so it can understand NetworkFileMode
-test http://revs.office.grindinggear.com/testing_source_rev_next_bundled.txt
-ask Thomas that it's ok to use 64bits patcher.exe: ok
-update next
-debug sub-scenes not receiving lights (g4-4-1): no light intersection
-extract Bounding from View
-remove Box type
-rename Bounding to BoundingVolume
-add View::BuildBounding(transform)
-use Bounding vector for ComputeVisibility lights
-use double-transformed light shapes for light culling
--- 2022-09-20
-bump debug string to 256 (shader names really need more space)
-check with Adam when he has PS4 repro with new fmod profile numbers: mix and update are still working
-update trunk
-reduce core usage on consoles
-tell Adam to test again
-mobile dynamic resolution: from 0.3 to 0.6 (stable and lower over time)
-mobile res 0.3 too ugly
-issue with larger render target at half res being slower than half res fixed-size: only for high-end devices
-use real frame time for dynamic resolution: max at 0.6 for now
-check with ThomasD about trail shader compilation bug: Felipe fixed the graphs, vertex local use as usual
-talk about D4 leak video and what we can do better
-check with Adam after contention fix: doesn't work, revert
-ask Michael to email Fmod support with our issue
--- 2022-09-19
-check again with MichaelG about fmod debug dll on pc to repro ps4 sound loss: possible cpu starvation
-check with MichaelG the new fmod stats: nothing really interesting, he got that DPS JobList increase warning though
-check with MichaelG about using the Fmod Studio profiler: nothing special, DSP graph constant albeit large
-grab screen for mac, and setup mac
-update next
-check Fabian scene_view_infos bug: can't repro with latest (potentially related to marauder with spear)
-ask ThomasD to try and repro g4-9-1 shader slot bug: no luck
-pass JamesW animation bug to ThomasD
-talk to Trevor about his slow down woes: using iPhone 13, should be better than iPhone 11 Pro Max?
-update mobile only to mvk 1.1.5: crashing when creating a timestamp query pool on both phones
-use higher iOS target version: fail (Metal 3 is A13 or later, iPhone XS Max is A12, iPhone 11 Pro Max is A13)
-use newer MoltenVK 1.1.11: fail still
-move iOS SDK requirements down again to original 12.4
-memory keeps growing: new MoltenVK, revert for now
-mobile gets stuck on loading screen: ok after rebuild
-use more idle queues on mobile (to avoid deadlock?): use 2 min
-enable mobile dynamic resolution using CPU instead of GPU
-check D4 leaks video and analyze what we could do better to best them
--- 2022-09-17
-make pc memory allocator put blocks in limbo for a while after free: can't because decommit memory can't hold node
--- 2022-09-16
-update xcode
-sync mobile again
-try to repro mobile shader crash and talk to ThomasD: can't repro
-talk to ThomasD about gpu-particles compat and old particles
-check with MichaelG about stale mat files: missing texproprs, should be deleted, ask Thomas
-check with MichaelG about fmod debug dll on pc to repro ps4 sound loss: no repro yet with debug dll
-test mobile stutters (too many thread? heat? regression? system cache sizes?)
-res from 0.5 to 0.4: no more throttling
-less cores: use 2-2-1-1 on 6 cores iphones
-commit ProfilePlugin changes: fix memory page not accessible
-test AA on mobile: enable high (no memory change)
-try 1.0 res: looks better, and memory usage is up 150MB
--- 2022-09-15
-build mobile
-add default parameters to sub scene add: no, passing references
-talk to Sean about mobile dowload UI
-ask Robert if testing-next-bundled has patching table
-talk to Chris (people leaving, mobile motivation, console/mobile recruitment)
-test using better textures on mobile (also even better on ground): already using 10 quality
--- 2022-09-14
-support screenspace ao point lights
-ask Michael and ThomasD if necessary to keep
-use fixed-size point light data structured buffer (smaller on mobile)
-apply scale after sub-scene transform inverse and back
-add scene system hooks
-use class for SubScene
-check particle merge camera position: later
-talk to Rhys about sub-scenes (limitations and how to use it)
--- 2022-09-13
-support point lights
-use 2 structured buffers: one for tiled lighting, one for render (stored in scene)
-remove _noscene uniform
-use object scene index when rendering with lights: doesn't work? just need to use no-transform
-combine light sub-scene and object sub-scene
--- 2022-09-12
-update next
-talk to ThomasD
-talk to MichaelG
-bug downscaled water (always apply post-proj to proj, in uniforms only)
-add light infos accessors functions: same 94FPS in g1-town
-meeting for mobile assets: take colosseum, and better texture, more reuse, more point lights
-use sub-scene variations of light infos
-use helpers for point lights: same 94FPS in g1-town
-move point light info to light
--- 2022-09-03
-hack screensapce index buffer
-check first loading not waiting for textures: test pregame transition one frame later
--- 2022-09-02
-check newest testing-next with all my changes for UI light bug: it works fine (rebuild issue)
-update next
-bug UI light not working: not happening anymore
-remove unused SetFOV
-remove matrices from cubemap task
-do not store camera vectors
-use simd::matrix::translation()
-remove stored inverse
-meeting at 11am for mobile
-commit
-test shimmer case: works fine with no NoPost
-bug on staging2: screenspace quad mesh optimizer re-organizing triangles and shader not happy
-patch staging2 4.99 using patching server 101.100.146.42:13012: yes, can repro
-enable debug string on staging and do another capture
--- 2022-09-01
-fake sub-scene inside map
-add culling aabbs
-add scene index debug view mode
-update next
-check crash on next in entity uniforms patch: can't repro
-apply transform to view frustum
-test CPU performance
-test GPU performance
-test tools
-test cubemap generation
-test minimap renderer
-test debug camera
-test loading
-bug shrike island water is too low: same on testing-next, not me
-commit
-remove stored inverse
-remove unused SetFOV
-do not store camera vectors
-remove matrices from cubemap task
--- 2022-08-31
-update next
-update DirectX11 compilers
-extend limit to 64 SRVs
-use view infos
-fix texture system sort levels comparison operator in Debug
-add scene index draw call uniform
-use impl for view and light infos
-use identity post-projection for all UpdateMatrices
-generate other view infos based on sub-scene transform
-talk to Rhys about AABBs vs Entity SceneIndex:: AABBs
-hook with ImGui debug sliders
-pre inverse scene transforms: pass inverse from debug
-transpose PS4 matrices
-apply scene transform for light
--- 2022-08-30
-use single view infos array
-add pass scene_index_start
-issue with light flickering
-crash when loading first zone: rebuild
-issue with shadows: use more view info size
-bug no shadows from dir/spot: use float4 for alignment/padding
-check with Thomas about DX11 shader compilation errors
-test CPU cost of more SRVs: ok
-test DirectX11: need to upgrade d3dcompiler_47.dll
-test GPU cost of view indexing: town from 90FPS? to 92FPS, same
-test tools
-test cubemap generation
-test minimap renderer: update view infos per pass
-test debug camera
-test loading
--- 2022-08-29
-check ps4 testing build break
-check Ivan texture changing bug: pass to MichaelG
-have MichaelG test on Intel when he updates next
-talk to ThomasD/MichaelG about clone textures: remove new clones from export
-talk to ThomasD about testing shader compiler errors: add try/catch to avoid errors
-talk to MichaelG about Felipe particle potential bug: have him have a quick look
-make a mobile build: had to hack Patcher bridging code
-test mobile crashing on loading screen (patching?): can't repro
-show ThomasD how to make a mobile build
-ask Trev/Sergiy for developer access
-finalize mobile build for ThomasD
-map for view infos in scene (using monotonic id in View)
-clear view infos map during garbage collect
-extract camera cpass uniforms to scene_view_infos
-issue with too many SRVs: increase to 64
--- 2022-08-28
-update trunk
-check cost of polling memory props each frame
-commit Vulkan APU changes on trunk
-merge on next
--- 2022-08-27
-update trunk
-copy on laptop
-fix AMD APUs in Vulkan (use host)
--- 2022-08-26
-update next
-commit warning as error for instance projects
-make warning as error on trunk too
-commit view changes
-use ViewProj() helpers in shaders
-clean drives
-fix xbox build (instances warning as error)
-merge to next: actually revert warning as error there, and wait for it to be merged
-make GI default on next
--- 2022-08-25
-update next
-commit view changes
-use common view matrices in water
-use common projection matrices in water
-move GetLightInfos to light
-remove LightType virtual and store in parent
-factorize matrices and vectors in View from Camera/Light
-think about how to factorize update matrices functions
-think about how light/camera matrices should be updated with sub-scenes
--- 2022-08-24
-ask Jeff to clear the shader list
-ask ThomasD to fix trail shader compilation error 
-test inverse camera (apply transform in Camera::UpdateMatrices)
-factorize views into one type with no virtual function
-make camera and light inherit from View
-talk to Chris about Nikita leaving: find new junior console/maintenance engine
-replace compare tests
-remove frustum view
-change cubemap view to use camera frustum
-remove has_view tests
-remove visibility listener and attach/detach view
-remove old view and rename View2
-careful with frustum default init
-test CPU performance in town: same
-test cubemap generation
-test debug light shapes
-remove debug code
-test loading screens
-test 6600XT (6800 is at 12ms on g4-8): >60 on 1440p, >40 on 4k (slightly better on DX11)
--- 2022-08-23
-compare CPU perf on next: same
-tell ThomasD about shader compilation errors
-ask Jonathan about ExileCon CPU
-update next
-bug shader pipelines jobs: update Thomas changes
-bug fog uniforms not set: remove old fogs booleans
-bug water phase uniform not set: remove
-bug Vulkan alloc leaks: clear gpu particle bindings
-think about where to store different camera scenes (inside camera? inside scene?)
-think about how to test camera scenes (without Rhys changes yet)
--- 2022-08-22
-catch up with Nikita
-catch up with Thomas
-catch up with Michael
-meet with Nikita: growth? goals? happy?
-check 3.19 issues: none
-talk to Jonathan/Rhys about sub-scenes requirements: translation, scale
-talk to Chris/Jonathan about consoles priority versus mobile: don't know yet
-talk to Ben about GDK
-talk to Sergiy about Android and 100MB limit: just exe/patch and download on first screen
-check commits
-update trunk
-fix Vulkan on AMD APUs: seems fine
-think about sub scenes (translation, scale)
--- 2022-07-29
-bug directional shadow flicker: shadow map splits
-bug loading screen dark: too many shadow casting spots, sort
-tell everybody to talk to the other engine guys
--- 2022-07-28
-check with Thomas that .dds.header are properly generated: no need, they are
-check lag when loading (didn't use to be there): don't try sparse shaders if cache exists
-talk with MichaelG about upcoming weeks: ao/epk extraction to mat, fbx to ast export
-talk with ThomasD about upcoming weeks: bundles, dust map
--- 2022-07-27
-update next
-bug asset viewer entity_id 0 on launch: add guard
-check Boaz physics feature request
-performance way slower when loading resources: need bundles
--- 2022-07-26
-update next
-talk to Robert to make sure testing_next_bundled has base gathering:
-talked to Jeff and fix testing_next_bundled asset test errors
-bug debug layer much slower with VirtualAlloc changes: same
-profile entity cull in g4-7 (2ms): mostly frustum TestBoundingBox
--- 2022-07-25
-update next
-talk to ThomasD about scheduling fragment linker trail fix
-talk to ThomasD and MichaelG about removing graphs from AOs and using mat list
-test loading gc in heavy map: +90MB
-commit memory define and gc
-separated commit for enable
-bug wind speed: missing WindVector init
--- 2022-07-24
-garbage collect one block max each frame: not great
-enable large allocs
-use bigger chunk size to reduce block count and swap time: 1/2/4
-add small define
-add big allocs up to 512KB
-compare loadtest peak: from 9.86GB (full heap) to 10.71GB (full custom)
-garbage collect during engine GC: 10.51GB
-use smaller chunk size
-stop big allocs at 256KB
-go up to 512KB for big (keep 16KB increment though), and 1MB for all chunk sizes
-actually do not use big: sizes to big for 1MB page (loadtest peak 9.73GB)
-try small chunk sizes (loadtest peak 9.40GB)
--- 2022-07-23
-lots of ground draw call types: it's fine
-use uint64_t hash for templates
-bug cubemap generation: fetch not following disable_async
--- 2022-07-22
-is AssetCompilerMaya 32 bits? no
-check iOS trail shader crash (gather graph names and pass it to ThomasD)
-try less cores for reduced virtual alloc contention: nope
-find a way to detect invalid trail graphs on pc: ThomasD will work on some fragment linker tech to fix this auto
-use smaller chunk sizes for smaller pools 
-smaller reserve size: can't, bundles need more 512K than 2GB
-compare loadtest peak: from 8.94GB to 8.56GB
-check performance: ok
-commit virtual alloc disabled
-actually enforce RAM budget: revert for now
-debug Alexander's glitch in g4-7: draw call types ordering
-swap is super slow: memory pools chunk size too small
-sort render list
--- 2022-07-21
-udpate next
-commit loading screen OnHide changes
-add budget to graph system
-compare loadtest memory with old: (no bundles) 7.61GB to 7.15GB (-0.46GB)
-commit memory changes
-crash when bundling: add heap alloc
-install Maya2018 to get DLLs
-crash when asset export: can't repro, MichaelG will try
-crash on mobile startup: allow reading patching table from disk
-sound is screeching on loading video end: contention for a 256KB-512KB alloc, do not use virtual alloc for now
--- 2022-07-20
-update next
-commit bundle system
-tell ThomasD about changes
-move bundle profile to systems profile
-understand where all extra 3GB are coming from: heap fragmentation, and over-committed bytes
-use reserve/commit and replace aligned_malloc with VirtualAlloc
-fetch alloc granularity and page size during init
-use individual allocations for Fmod Live Update
-avoid over-allocating for chunk size
-large reserve reported size is too big: use AddStatAllocTag
-check loadtest: heap goes from 0.6GB to 1.8GB (driver), private from 6GB to 7.6GB (tracked 4.7GB)
-check performance: toxic rain and loading ok
-smaller chunk size for small and tiny: worse (from 550MB to 640MB)
-remove wait in LoadingScreen::OnHide
-use heap profiler to determine heap allocs origin: graphics driver
-find a way to hook graphics driver allocations: can't unless using DLL injection
-try with mobile-like cache sizes: driver heap size greatly reduced (1.8GB to 600MB), still 1GB of VA fragmentation
-use VA starting from >512KB: crash too many 1MB allocs, and overhead is huge
-show ThomasD about VS parallel projects compipation settings
--- 2022-07-19
-ask ThomasD about moving bundle plugin: kinda ok if only Bundle2.cpp/.h
-update next
-add RAM budget and modifier and shrink file system cache
-fix Oodle memory callbacks on PS4
-glitch after changing options: pass to MichaelG
-make bundle2 File::System
-support init enable
-move functions to system
-add update for adjust
-move shrink to system
-remove FileServer
--- 2022-07-18
-ThomasD working from home for the week
-update next
-commit budgets
-talk to Trevor/Ben about MTX shop: same as PoE2 character select
-crash when exiting room editor: move engine to main
-add GlobalWait engine setting and parallelize asset viewer: model disappear for a frame with this, not good enough
-update trunk 
-backport animated render material override fix: no need
-move old resources to idle to avoid hogging medium queues: not good
-revert Idle removal: ok
-wait for high/medium/low on loading screen hide: still holes
-block loading screen for active assets: yes it works
-avoid first loading waiting for all
-fix rainsparse.pet crash: env settings
-try to repro flicker in programming world: yes, shadow getting lighter for some reason
-check potential particle merging bug: can't repro
-check patching being slower: no changes from us, same from Thomas
--- 2022-07-15
-update next
-bind Window.NextDocumentWindow/Nav: not good enough
-profile asset viewer graph edit and shader compilation: 500ms DX11, 200ms Vulkan
-test g4-7
-remove idle job queues (use low instead, and medium for resources)
-test 4/4=1-1-2, 4/8=2-2-4, 8/16=4-4-8, 16/32=8-8-16: too slow on 8/16 where high is only 8, losing FPS
-commit
-fast shader reloading: Ctrl+E and ImGui button
-update trunk
-add lake league to database
-crash in lake area on DX12: can't repro, pass back to Jatin
-move budget to engine system
-move modifier to engine system
-add shader/render usage & budget variables
--- 2022-07-14
-test toxic rain with new allocator: same (maybe 1% slower)
-check issue when Ctrl+R is taking longer and longer: can't repro
-separate game and engine heaps: not good (more memory, no perf)
-measure fragmentation after 10 loads
-bigger chunks: 1MB best (same memory usage as old, 8.33GB)
-avoid contention on shader system: medium up to 128K
-avoid UI record contention: 256KB not enoough
-use small vector for system sort
-commit memory allocator
-remove engine telemetry cmd window popup
-revert intro video changes
-bug flicker in asset viewer: missing animated entity material override uniforms
-add --debug-layer to AV
--- 2022-07-13
-update next
-check Alexander's glitch: can't repro
-talk to Jonathan about trails on trunk: just hack the file format to not crash
-talk to Kieren/Thomas about moving epk gather to base gather tool
-use custom memory allocator: texture system update slower
-check streaming contention with systems update: still some in shader system
-meet with Michael: growth? goals? happy?
-meet with Thomas: growth? goals? happy?
-profile allocator: free list find
-check TileSheet creator stuck on exit: missing job_count++
--- 2022-07-12
-update next
-add issue for world metadata maps
-add issue for streaming debug view mode
-use idle for non-active in texture system
-update shaders the same way we update textures
-update pipelines the same way we update textures
-test
-commit
-profile simulation: nothing really huge, but some slightly expensive (get bone position, play audio)
-use mimalloc: not good enough (peak memory usage too big)
-test toxic rain without PROFILING at all: from 60FPS peak to 70FPS
-check graphics glitch in programming: can't repro anymore
--- 2022-07-11
-update next
-commit audio parameters changes
-commit animation jobs
-commit smaller small vector changes
-commit entity temps changes
-fix some wrong shader tags
-more shader memory tags
-investigate shader memory: Id copy in Shader
-do not wait and use idle for non-active: not really working
-talk to Chris
-meeting with year goals
-test g3-13 sun light effect
--- 2022-07-09
-use std::atomic for indices and separate mutexes for commands/temps
-add FreeTemp: no noticeable performance loss
-disable commands for 1 frame before setup scene
-check super slow second interpolate in Dreadnought: needed bigger chunk size (1MB)
-animation palette buckets and jobs
--- 2022-07-08
-mega-res test: not so better than 4k
-compare: about the same in g2 caravans
-try with extra large stack and no clear: much better (all coming from allocator contention)
-clear stacks when GC
-check memory: from 50MB to 200MB
-trim stacks
-reduce temps memory usage: use smaller small vector size 4
-slow FrameMoveEnd in toxic rain test case: memcpy animations (not really much faster)
-update next
--- 2022-07-07
-update trunk
-update trunk with engine system exits things: missing job system try/catch when jobs disabled
-update loadtest with exit immediately: /closeinstancewhenempty
-profile toxic rain again
-update next
-reduce unknown allocations: add job tags
-use frame temp allocator and handle for entity parameters
--- 2022-07-06
-update next
-test debug view modes
-commit GraphDesc changes
-why do we need group indices at all? stage merging
-flatten EffectGraphDescs
-flatten EffectGraphGroups
-make ref town memory screenshot
-use draw call pool allocator: saves 10k allocations
-fix deadlock in texture system: use FindLevel in IsReady
-make ref screenshot for graph filename string pool
-use string pool for graph filenames: revert, buggy MT string pool
--- 2022-07-05
-update next
-update trunk
-add clear fix to trunk after texture system revert
-find a way to wait for texture without locking up: no target, limit pressure precision and wait for active only
-commit graph descs changes
-optimize slow FrameMoveBegin/End
-copy graph/uniforms/bindings into GraphDesc (declared in Component.h)
-remove std::make_shared
-compare performance: much slower, flat map alloc
-use small vector for GraphDescs: no diff
-back to using shared_ptr
--- 2022-07-04
-update trunk
-test
-check new patch for texture system revert: clear fix not there (put it later on consoles)
-try reverting fx graph changes: yes, ThomasD change 165937
-update next
-commit bindings
-copy uniforms/bindings into GraphDesc: issue with SaveToStream
-remove owner_id/index and use monotonic id when building instance
-remove GraphDesc
-talk to Alexander/Jonathan about GPU particles dirt/rocks and wind/physics: graph depth access, and wind sources
--- 2022-07-02
-add Bindings
-own entity bindings in template
-update next
-merge texture system fix
--- 2022-07-01
-update next
-update trunk
-commit small string changes (saves 40k allocations, but uses 10MB more)
-bug slow loading: disable loading screen shader/pipeline wait (enabled on next)
-bug delve and atlas missing wait for render-to-texture: wait for done in IsResolved, and merged to next
-update next
-generate bundles stuck: preload was deactivated
-use monotonic for instance desc: not working
-testing stuck on loading: change IsReady to return true if empty
-talk to Thomas about parallel asset export and memory numbers (1GB per core so far, #131903)
--- 2022-06-30
-update next
-move Desc to EffectGraphInstance
-move InputSlotType to BindingInput::Type
-pass std::string_view to InstanceDesc constructor
-use Memory::SmallString
-material allocations: 30k, 6MB
-use small string in material
-talk to Nikita about export
-use small string in Filenames
-use string_view in fxgraph
--- 2022-06-29
-commit
-profile interpolate during toxic rain: trails effects play and trail init
-warmup particles/trails at template creation
-profile simulation during toxic rain: usual gameplay stuff, lots of objects
-disable scoped profiling
-use SmallVector for graph filenames
-check long Render job during culling: animation/particle/trail prepare
-better entities colors: use purple gradient
--- 2022-06-28
-bug entity AddEffectGraph should hash full desc: hash owned/index
-update next
-check commit with MichaelG
-talk to Sergiy: try with --debug-layer on pc
-talk to AlexN about perf issues: just DX12 stuff
-check asset viewer slow compiling before my changes: ok, same
-return temp inputs and booleans from GatherInputs
-replace loading video with smaller gear one: looks stretched
-check trail shader failing with vertex local again: pass to ThomasD
-look at mobile failed to load textures: ThomasM says later
-fix trunk prod compilation: missing ScopedProfiler include
-save old exe for comparison
-bug ground in g1-town: temp instances cache
-cpu capture of slow simulation when toxic rain: trail/particle warmup, play audio effect, apply damage effect
--- 2022-06-27
-update next
-move GetParentCustomParameters outside instance desc
-fix video not showing: missing engine option
-check messed up texture on mobile: only one tileset, export issue?
-use graph hash
-store descs
-remove final instances
-use graph filename hash in shader desc
-compare types/programs/shaders/templates counts: ok 
-remove alpha ref helpers from instance
-remove instances
-check debug view modes in client: ok
-remove water blend mode check for debug view modes
-remove instance_refs
-do not store instances
-use descs instead of instance groups
-do not use shared_ptr
-move setup/arrange inputs to EffectGraphInstance
-test debug view modes
--- 2022-06-24
-update next
-compare template count ref (g1-town): 10k entities, 1751 templates, types 1432
-move disable_merging and effect order to regather: same templates, same types
-use graph filename hash: same templates, same types
--- 2022-06-23
-udpate next
-test loadnext
-commit
-talk to Alexander about cache gpu particles descs hashes: constructor and batch key hash
-update trunk
-compare toxic rain on trunk: about the same 45FPS
-use InstanceDesc constructors instead of LoadFromBuffer/Load
-try bundling on next: LUT lock rect and null device
-use same high/medium/low/idle queue count
-profile toxic rain interpolate: simplify effect graph grouph copy, and avoid graph fetch
--- 2022-06-22
-udpate next
-commit global inputs
-bucketize effect graph system
-optimize Trail::GetVertexType
-check cost of removing particle/trail merging: not bad after graph contention reducing
-rename graph to graph_filename
-use graph filename instead of handle in InstanceDesc
-use filename in entity desc
-fix State.cpp production compilation
--- 2022-06-21
-check PS4 GNMX crash in prod: missing cpass or something, need repro
-check base shader gatherer exit crash again on trunk: better, in shader compiler now
-udpate trunk
-add missing engine init in shader compiler
-update next
-check Prepare in Debug (Alexander issue): can't repro
-kick meta pass as soon as created
-fix bug in shader compiler audio exit after engine/video changes: added proper disable_audio check
-update mobile after green build
-restore no-wait when switching options
-remove idle queue again on mobile first: no, leave idle queue on
-add exception message box: can't show box from background thread
-check mobile crashes when playing/idle
-put cloud request to 1 on iOS for now again
-slow prepare in g2-9-2: do not use small vector for MetaPass (slow allocation of 126KB)
--- 2022-06-20
-update trunk
-commit disable_video to trunk
-only for directional
-update next
-ask Jeff if we're still merging from trunk: yes, we are (just delayed with current build issues)
-commit shadow multi passes to next
-update mobile pc
-setup MFA for DevNet
-profile N>128 batches render: 25% draw, 25% uniforms, 10% find, 10% buffers
-update Xcode
-make mobile build
-remove pass type from BuildUniformInputs
-optimize prepare: from 0.5ms to 0.1ms
--- 2022-06-18
-parallelize some meta-passes
-use different colors for render 
-update trunk
-check base shader gatherer exit crash again on trunk: video clear
-add disable_video option
--- 2022-06-17
-update
-pass particle issues to ThomasD (all started happening around 14th)
-commit categories
-bug allocations behind passive skill tree on trunk
-intro video earlier
-check base shader gatherer exit crash on trunk: stil crashing on exit after bundle2 deinit
-add more engine clear logging (in engine system only to avoid spamming in tools)
-talk to ThomasD about GPU trials and UV calculation: do it on the GPU
-bug in DX12 trail with no input: pass to Ivan as we can't use vertex_local nodes with trails anymore
--- 2022-06-16
-add more logging to engine deinit
-talk with Ben about black bars: on trunk, so do it using black bars in UI first
-team estimates for Chris
-measure loading times with no shaders: 20s/4s
-use PoolAllocator
-use SmallVector for static node vectors: little difference
-update
-commit
-check low quality texture loading on trunk: update VRAM before
-remove idle queues, and use more low queues: loading with no shaders goes to 14s/4s
-use simpler categories
--- 2022-06-15
-crash when loading shaders in asset viewer: do not manually load shaders
-update next
-avoid config copy per frame
-ask Ivan for feedback and possibly disable jobs in the AssetViewer
-disable jobs in AssetViewer since some artists complained about the pop-in
-disable vsync in AssetViewer: no vsync and FPS limit at 360/60
-test with vector instead of small vector for parameters: from 72k/128MB to 95k/66MB
-test with no small vector for graphs: from 72k/128MB to 104k/34MB
-use Memory::Object for node/parameter: to 74k/22MB
--- 2022-06-14
-update pc
-commit tools multi-threading
-parallelize physics better: 11ms to 9ms
--- 2022-06-13
-update trunk
-crash exit base shader gatherer: ThomasD will try using Asan
-update next
-add more print in engine shutdown sequence
-resource and string_view change: pass to Thomas
-talk to Chris: ok to end-game crash on consoles, release after Diablo4 (publicity, errors)
-check device allocations: around 30k
-multi-thread tools (asset viewer, room editor, tile test bed)
-enable high-jobs in tile test bed
--- 2022-06-10
-update next
-slow PoE/AV on John's machine: updating driver didn't help, changing GPU helped
-update trunk
-bug armor and frozen EPK: pass to MichaelG
-fix PS4-next compilation: add some defines to Sergiy changes
-check snapshot on juiced map on trunk: everything that goes into caches
-talk to Michael about time dynamic parameters: only float, and use prefix
-update mobile pc
-try mobile pc idle vulkan error: can't repro
-revert cache size changes
-ask Robert to unstuck ps4-testing-next
--- 2022-06-09
-talk to AlexN about clear commit impact once it's built in: no changes it seems
-add missing new/delete hooks on xbox
-merge tracer changes on trunk
-ask AdamM to do the same on PS4 (include popped out memory with detailed buckets): 
-ask AlexN to re-test (possibly didn't have latest changes): loadtest is properly fixed with my changes
-check trunk trail crash callstack: pass to ThomasD
-talk to ThomasD about trail crash on trunk: he'll investigate
-check that loading screen textures on trunk are marked as UI: yes, it is
-update trunk again
-ask AlexN to take juicedmap screenshots (to compare with PS4): legit memory usage goes over 4.2GB (too much)
-reduce cache size on console, and VRAM on xbox: ok
-lots of frame allocations are not caught in tracer: do not check alloc threshold
--- 2022-06-08
-update trunk
-merge frame allocations reducing to trunk
-ask AlexN to get town comparison screenshots
-clear all systems at the beginning of loading screen on trunk
-clear entities command buffers
-talk to Nikita about console-next builds
-ask Robert about status: builder disk space, and Sony/Microsoft SKUs/signing
-increase console VRAM a little: 1200MB
-make a mobile build
-try repro VPN? crash: no repro, asked QA to try using VPN
-test mobile at 30FPS: doesn't feel great, but can use 0.5 ratio
-update next
-check effect graph memory again using loadtesttiny: +100MB, +50K allocs (all in Unknown)
--- 2022-06-07
-ask ThomasD to check testing shader gathering crash
-fix ps4-next compilation
-add snapshot/compare
-update
-commit tracer changes
-commit frame allocations changes
-uniform buffer leak in g2-town: ok, caravan entities destroyed late when out-of-view
-clear entities between runs: can't (GC is too late)
-make engine disable_audio/disable_render positive settings
-reduce texture job count on consoles
-feature not present on mac: disable geometry shader on APPLE too
-test memory using loadtest: maybe add Engine::Shrink? maybe clear shader system on consoles?
--- 2022-06-06
-use SameLine for buttons
-use option box for size/count
-factorize tracer in internal: issues since we use memory stuff in it, do it later
--- 2022-06-05
-think about how to not use shared_ptr in memory caches: too soon, reduce frame allocations first
-better memory tracer with ImGui clear button
-catch all frame allocations
-reduce frame allocations
--- 2022-06-03
-check that extra 800MB of textures when modifier is 0: always skip mips when loading low textures
-merge use of engine system in tile sheet creator
-merge wait for shaders/pipelines
-check tools
-test 
-sync
-some UI low textures are loaded full res: when mip1 size is not a mutiple of 4(2048x2044), ok with bundles
-commit
-tell BenUI about it
-reduce VRAM on base consoles
-factorize thread yield, and don't yield on mac: just remove them
-talk to AlexN about new texture system
-put back texture profile: add missing file
-try smaller graph system size: not useful since all graphs are owned by render
--- 2022-06-02
-commit include changes
-revert cache sizes changes on trunk
-talk to Chris about gameplay getting bigger on trunk (console OOM)
-talk to Kieren about committing texture system on trunk: all good
-update trunk
-merge texture system into trunk
--- 2022-06-01
-Oodle texture license expired: use no compression for now and ask Chris (Nikita handling it)
-replace large texture pool with smaller VMA block size
-test memory usage on PC using console numbers: effect graph cache sizes have little effect 
-remove instance desc include from system 
-talk to MichaelG about headers
--- 2022-05-31
-unrevert vulkan memory changes
-add unit tests stream deck key
-talk to AlexN about xbox OOM
-revert clears and reduce cache size
-use separate blocks for large textures on xbox? already using 1MB blocks, so all textures are committed
-update xcode
-check testing mobile again: still crashing (embedded patching table out-of-sync?) seems like ipa was out-of-sync
-check with Thomas about the embedded patching table
-test mobile pc client (just handshake, will crash later since data are incompatible): works fine
--- 2022-05-30
-build mobile pc
-check mobile pc shaders: ok, need to increase shader system cache size
-build mobile ios
-check testing mobile client crash: fine locally
-re-enable memory hooks on iOS: seems to work
-update pc
-reduce cache size on xbox, and wipe when garbage collect
-crash trunk pc when exiting: custom parameter uniform input missing storage reference
-update next
-crash testing_mobile: only when from build bot
-avoid recreating one Draw2D buffer each frame: just check size
-try reclaiming VMA free blocks: works, but not great
-try using VMA pools: working pretty well
-add vmaCreateXXX return value check
-test using debug layer: ok (just needed to add physical device feature geometryShader, not on mobile though)
-think about effect graph parameter memory
--- 2022-05-27
-add engine system disable async
-reduce xbox chunk size to 1MB
-crash mobile preload bundles: fix define out
-use enable block instead of disable async: simply do not block
-prebuild pass uniform inputs using null draw data: not worth it (too complex for little gain)
-use larger small vector: not worth it (very little gain)
-use memory callstack debug tool --live-mem
-update mobile pc
-reduce all system cache sizes: -~100MB
-understand where the 200MB of profile come from: debug GUI manager
-disable PROFILING on mobile: doesn't save much more
--- 2022-05-26
-investigate TileWalkableMaterialCalculator: revert for now
-clear system/GC less often in TileSheetCreator
-update mobile pc
-check performance/memory on pc
-update mobile mac
-make mobile build and check performance/memory: 1.71GB peak
-use bigger mobile shader fetch queue: ok
-use lower VRAM amount: not really smaller (needs at least 600MB)
-use same settings on mobile pc than on iOS
-profile GPU memory on mobile
-measure mobile memory without profiling: from 1.55GB to ? (crash)
-reduce bundle2 index memory size: from 67.44MB to 41.8MB
--- 2022-05-25
-check unset cobject
-check unset cpipeline: none
-check unset cpass
-check tile sheet creator slow: ignore software adapter and don't require an output if dummy window
-update testing_macos
-make VideoPlayer a system
-replace id by uint64_t
-remove Player prefix
-rename to VideoSystem.cpp
-add videos mutex
--- 2022-05-24
-update testing_macos
-make testing_macos local server: take Thomas'
-check mac mtx bug: needed to restart the server
-use upload size to change texture usage depending on settings
-only reload high mips when changing texture quality setting
-remove ReloadableShader/Texture from DeviceUploader
-test and commit
-update to VMA 3.0
-add some code to detect when uniforms are never set
--- 2022-05-23
-use (1 - pressure)^1/n for modifier
-merge with GetAvailable/Total
-add GetReservedVRAM
-reclaim VMA blocks? can't (unless doing explicit defragmentation)
--- 2022-05-22
-check PoE2 memory usage in doodad heavy map: g3-5
-lerp if new budget is higher, assign directly if lower
-lerp source data (pressure)
--- 2022-05-20
-hook dowloading UI
-move passes helpers to SMAA, DoF, and others: can't really extract since everything is inter-connected
-use RAM to allocate texture when VRAM is full: can't for BC textures
-plug VMA budget for used VRAM
-reduce texture budget if VMA budget is lower: can't right now (feedback loop causing instabilities)
-check Michael's IdHash patch: remove UniformKey and use uint64_t directly
-main thread not working during culling in g1-2: don't use JOB_QUEUE
-use vector/reserve for meta-passes/passes/sub-passes: no diff
-use 128 reserve for scene inputs: no diff
-reduce peak staging memory: max 550MB with 128 textures jobs, but no incidence on loading speed
-meshes not taking that much memory on next: 200MB vs 500MB targets on 4k (400MB of main targets)
-bug UI icons blurry: can't skip mips for raw/disk textures
--- 2022-05-19
-use mononotic id for attached render target
-use helper functions (assigned, reuse, create)
-use hash when grabbing available
-remove _attachment from names
-add passes names to render doc captures
-bug when changing vsync in Vulkan: revert prepare during update
-bug when when switching AA: not a bug, just too many dynamic lights (4 max)
-talk to Alexander about fog still buggy sometimes
--- 2022-05-18
-check with Michael and Kieren for the rest of the graph system merge
-talk to AlexQA about Michael merge: will test later (day 1 patch most likely, and 3.18.1)
-update
-add erase button on StreamDeck
-measure ref render target memory usage: 331 MB
-use render target instead of texture in render graph
-fix animation FrameMoveBegin that can't be a job
-merge on trunk: mention DO NOT MERGE, and Mac M1 issue
-use Attachment and backing render target
--- 2022-05-17
-check with ThomasD about cloud shader bug: try to repro on consoles
-check with Nikita about minimap DX12 issue: possibly not the load/save code but an actual render one?
-update
-always do depth override
-store ui callbacks locally
-pass clear color to frame move
-prepare render graph during renderer update
-bug when trying to select character: terrain generation bug
-commit prepare changes
-consider clearing systems on xbox when swapping sessions: later
-think about how to automically allocate render targets
--- 2022-05-16
-check mobile build
-thank Nikita for last weekend release watch
-disable texture exceptions on consoles for now
-ask Thomas about what Alexander talked about (doodad?)
-update
-performance issue after Michael's commit: no hash name
-render graph compute is slower after Michael's change: string hash
-talk to MichaelG: use IDHash
-test bug minimap DX12: can't repro on testing
-huge contention on entities render: more of slow UniformKey hashing
-bug with all failed shaders on console staging: wrong exe again?
-move camera uniforms to scene
-use static uniform/binding inputs: saves 30%
-use vector instead of small vector for inputs: no change
-bug yellow in puddle reflections: not my changes
-append null inputs: saves 10% or less
-update testing macos: working fine there
-bug cloud shader wrong hash: pass to ThomasD for further investigation
--- 2022-05-14
-use jobs for system stats gathering: not enough, and only one screen
--- 2022-05-13
-collapse profile by default: not great
-talk with Michael about graph dyn params: add debug name and use PROFILE_ONLY
-talk to Nikita about GDK
-remove unused shadow_samples
-move cull_stats to entity system stats
-remove unused variables/functions
-move GI/SSS params to render graph
-move various DrawData to render graph
--- 2022-05-12
-merge vertex attrib back to trunk: resolved mac flickering issue
-check asset tester crashing sometimes on texture exception: add null handle guard
-add back render pass profile (not just meta-pass): later when console next builds 
-check with Mark2 about fix for not waiting for pipelines
--- 2022-05-11
-put throw inside show
-full run and fix assets: later
-throw when missing texture only in asset tester
-profile texture loading: 60% decompress
-uncompress bundles always on pc: still a lot of cost in allocs/reads
-use medium priority for client main init jobs
-talk to Alex about needs? nothing yet
-talk to Mark2 about needs? nothing yet
-preload tiny/login bundles earlier
-loading screen not showing on mobile: load KTX
-measure memory on mobile: 1.5GB
-talk to Jonathan about needs? automatic render target, and maybe more
-bug loading screen not waiting for textures: wait for pipelines and shaders
-move audio system profile to system view: asked MichaelG
--- 2022-05-10
-check tile sheet creator break: do not skip mips for volume/cube
-remove old code
-use Texture::Handle directly
-remove unused member functions from handle
-vacation Nikita: 4/07 to 12/08
-use 8 16 8 4: no gain
-check that performance overlay still works: ok
-make sure failed resources don't accumulate in asset viewer: later
-use engine init/clear in asset tester
--- 2022-05-09
-update
-activate
-test testing_mobile: indeed crashes when in first map after 1s
-talk with Nikita about xbox-testing-next: ongoing, more asset fixes
-test mobile pc with texture system: all good (150MB max)
-check mobile crash: add bone weighs check
-make an issue for checking GroundSlam glitch (z-fighting? alpha sort?): pass to ThomasD
-bug render list multi-threaded dispatch not stable
-bug login scene being black: not a bug, camera angle (and reflections) are differents
--- 2022-05-07
-reduce fetch contention
-test asset tester
-test base gatherer
-test shader compiler
--- 2022-05-06
-set high and low to same when non-default (also check Unload)
-error in post-process cube: missing IsNull check
-optimize sort (pointers and uint): not faster
-test cubemap render
-make sure minimap is using high-res
-rename engine settings
--- 2022-05-05
-measure QoS from kick (and reset when unload)
-better sort
-plug importance into sort
-bug physics when paused: pass to ThomasD
-display ui size
-compute screen size from alpha test shadows
-do not load low for delve maps: no async
-commit
-measure loading time with/without bundles: 3.7s vs 4.4s
-tools darker: load cube/volume directly
-test tools
-play test with very low budget and no bundles
--- 2022-05-04
-dislay QoS and histogram
-have MichaelG have a quick look at that Jonathan bug
-budget
-add debug slider to adjust budget modifier
-plug VRAM usage in Status (push)
-test DX11: do not low cube/volume
-display active working set memory usage
--- 2022-05-03
-replace warmup with gather (uses desc, no throttling)
-bug with some checkerboard texture remaining (when slow loading): error with state
-skip levels when loading low raw
-use only 4 queues for low (if texture system)
-add throttling profile
-bug some textures are null
-display total size
-display size histogram
--- 2022-05-02
-count headers and levels using static
-do not use placeholders for UI
-block for loading screen images
-talk with Nikita: console builds and dx12 glitches
-talk with Thomas: trails and small asset viewer qol
-talk with Michael: epk warmup (later) and pet/trl ownership
-talk to Jonathan if anything for Michael: dynamic parameters on asset viewer timeline
-skip mips: clear system when changing option
-check that Ctrl+R is still working on next: all but mat files, pass to MichaelG
-loading screen wait
-bug infinite loading when using loading screen: only when active
-bug some texture are not used/loaded (happens also with bundles)
-crash when no bundles in mask sampler lock: block for readable
-use medium jobs for textures as well
--- 2022-05-01
-avoid thrashing more than cache size
-add GetTotalSize to image formats
-store size in Infos
-load level outside locks
-load header outside locks
--- 2022-04-30
-read header only in warmup
-load low mips in level constructor
-update
-test with bundles
-commit
--- 2022-04-29
-add header cache
-move TryLoadClone/TryLoad to Load
-add level cache
-clear caches when OnDestroyDevice
-make ReadRawHeader return header
-do not store level
-use header for ready
-move header to implementation
-commit: ref render time (ST 3.4ms, MT 5.2ms)
-add basic stats
-measure active
-commit
-use jobs
-commit
-rate-limit and wait for jobs
-potato mode
-async and disable async
-commit settings
--- 2022-04-28
-share Desc, Type and Flags
-remove external TextureResource::Description
-add own TextureHandle decl/impl
-use Texture::Level (and typedef to TextureHandle)
-comment out Streaming::System too
-commit
-separate warmup(header) and fetch(handle)
-add hash computation
--- 2022-04-27
-check with Nikita about ~template ps4 crash: keep reproing today on staging
-talk with Nikita about not exorting LOD1: ok since PoE2 won't be on old consoles
-check Alexander interpolation accumulation bug: can't repro
-check with Michael about EPK warmup commit: generate graphs from descs
-use size_t for sparse set index/generation: refs Nikita ps4 issue 130353
-simple texture loading
-move texture loading to texture system
-clean up functions
-ps4 packaging issue: put out of sce_module
-xbox-cert-staging crash on launch: use proper new /Xbox/fmod.dll
-comment out texture resource member variables and functions
--- 2022-04-26
-use draw call count for histogram
-commit batching changes
-check testing-mobile build break (TileSheetCreator): got green now??
-move Nikita issues
-check with Nikita about PS4 ~template crash repro with Asan: work with Adam
-clear effect graph system: may help with TileSheetCreator crash
-compare template count from 1 to 8 buckets: from 3100 to 900
-add empty texture system
-add graph system IsActive
-commit new texture system
--- 2022-04-23
-fix mobile build: use __APPLE__iphoneos, not enough
-use global render list: render from 9.0ms to 6.7ms, batch size from 1.7 to 3.8 avg
-add batch size histogram
--- 2022-04-22 
-ask Mark2 if ThomasD can move desk next to Nikita: ok to move anytime
-check Sergiy iPhone Mini touch shifting: yeah, can repro with my testing_mobile on his phone
-remove mobile contentScale *= 0.8f and divide by screen scale: better, but still slow when hot
-remove mobile main depth clear hack: bug still here, try again later
-reduce mobile available VRAM: 900MB is enough to pass M5_1
-use mobile borderless fullscreen and smaller frame size 
-remove dynamic resolution hack and screen scale divide
-update next
-patch next with mobile changes
-divide shadow map by 2
-disable mobile AA in settings
-disable mobile DoF
-disable mobile Bloom
-commit on next
-test with AA pass-trough and depth overrider fixes: ~0.2ms
-test tools on next
-test client on next
--- 2022-04-21
-try force high to speed up device switch: not working
-check mac cursor: don't know how to fix it, later
-check Trevor's mobile memory comparison: nothing visible on these screenshots
-bug with shadow quality: set scene renderer settings first
-merge recent engine changes to next
-make mobile build
-switch StreamDeck shortcuts to next (one pane only)
-ask Mark2 if ThomasD can move desk next to Nikita: no answer yet
-remove development checkout, use testing instead
-tell ThomasD about some patching table improvements: later
-add mobile message box from ThomasD rev: later
--- 2022-04-20
-bug AA not workin: enabled when resize
-push one timestamp pair for each Renderer::Pass
-check performance again after AA fix: resolve for now
-check that DX12 is in for full-screen hack: added
-check initial hiccup on S2: ok after shader compilation
-bump engine version: ok 1.5.0
-talk to Kieren: merge engine version bump, wait for ps4 post-process measure fix
-have QA test performance difference on slow hardware with 100% same settings
-trigger depth override quad only if some draw calls have depth override
-update Xcode
-do not copy render target if AA is off
--- 2022-04-19
-check commits
-check with ThomasD about other Thomas issue: static deinit ordering
-move my 3.18.EnginePatch issues to engine improvements
-move MichaelG issues
-move Thomas issues
-update pc
-push one timestamp pair for each Renderer::Pass: wip
-check Jatin's DX11 perf issue: seems related to AA pass-through, not a big deal
--- 2022-04-12
-move PC on top
-modify roadmap to only now and unscheduled
-talk to the guys about how we go about committing to next
-talk to Trev about mobile
-talk to Jeff/Kieren about how to merge on next
-have Jonathan have a look at textures on next with ThomasD
-questions for Jonathan/Chris: PoE2 not on old-gen, different SKU, not released earlier
-ask Chris to take a few days off
-add entity tweak command: pass to Michael (need renderer system clear)
-make an issue for next console builds
-make an issue for trails (evaluate, fps-independent, mesh emitter, )
-make an issue for textures on next (evaluate, generate headers, reduce usage)
-flickering UI
--- 2022-04-11
-check bundles generation on staging: worked, just needed stat descriptions for me
-test testing_macos with network file: had to use --nopack, need to use InputFile
-display message box in network file and patching table
-ask ThomasD how to force displaying one profile plugin page
-make testing_macos with network file checkout
--- 2022-04-09
-try vim macros
-make mobile build
-fix FMOD missing event log spam: comment audio logs for now
-capture mobile GPU: everything is slower (throttling?)
-use 0.5 dyn res on mobile for now: 22ms to 13ms (pure bandwidth bound)
-test /warp MapWorlds_M1_5 crash: reject this map for now (using > 2.05GB)
--- 2022-04-08
-check PS4 post-process GPU way longer than xbox: pass to Thomas
-bug invisible flame wall: pass to MichaelG
-commit populate_pbxproject.py: Adam will do it directly
-make a mobile build
-can't open patching table
-merge GetNameHash change in PatchingTable
-can't open file (Thai.datl64): wait for InputFileSource changes to get merged
-ask Daniel about adding /bigobj to ClientInstanceSession.cpp again for all: no answer
-issue with DirectX12 on low VRAM GPUs: pass to Nikita
-ask Robert about Linux builds randomly timeouting: maybe Increbuild hogging resources
-crash on xbox (Blight tower): can we repro on new staging at all? (not happening on testing)
-clean engine patch bugs 
--- 2022-04-07
-check Ivan feature request 129905: ok for 3.18.mtx if no bigger engine patch issue
-check device settings init values: init and cull obsolete
-disable dyn res in tools
-ask Alex about light init value (to avoid visible interpolation at first): he'll fix it
-merge my changes to next
-check testing mobile crash: can't yet, need to wait for green build
-fix debug view mode not being applied when Regather in tools
-build macos: ok
--- 2022-04-06
-talk to Trev about issues (too many, not significant)
-have Nikita and Thomas check xbox memory usage: baseline with no VMA
-store in device and apply when init and setting renderer settings
-ask QA about macos test: Arthur will make sure we do
-present lag: can't repro, ask QA again
-fix staging2 bundle generation: can't, fragment parse error before that
-bug invalid vector access when switching to DX12: can't repro
--- 2022-04-05
-bug GI stays on when switching options in hideout: init scene settings
-check xbox potential OOM with Thomas again: 200MB from VMA blocks, 300MB from driver?
-check with Adam if he can repro on xbox-testing: can't yet
-bug DX12 resizing on some machines: device settings not enough
-check macOS again after 4-byte char fix: ok
-check macOS performance: looks ok
--- 2022-04-03
-clean WindowDX constructor
-check with AlexQA about xbox crash rate: 900 crash/day, 2300 players, 83 mins avg = 30%
-have Thomas reduce the entity command buffer size and add allocation detection code
-crash in StopDevice: add guard
-build macOS
-make network file work with patching table: fix 4 bytes hash in network file
--- 2022-04-02
-remove UI::RegisterControls from ClientGame::OnCreateDevice
-replace all UI::Core::GetD3DDevice
-do not store device locally
-commit
--- 2022-04-01
-check that mobile has still 0.7 dyn res: yes
-check testing mobile: fixed and merged (add overflow check)
-commit
-talk to Alexander about json code (check bounds)
--- 2022-03-31
-add prod exe to stream deck
-udpate
-init engine/renderer system with renderer settings
-remove SetRendererSettings from tools (just use init)
-ask Trev to create me an account for mobile alpha: vincent1@email.com / password
-remove window GetDevice
-own device in renderer system
-remove unused WindowDX::UpdateWindowStyle
-remove tools UpdateWindowStyle
-update
--- 2022-03-30
-fix mobile alpha compilation: direct hack
-store graph uniforms in template
-bug normal broken on next: not a bug, just old behavior
-fix Uniform missing DataTrack5
-resolve fmod issue: done by Michael
-move OnTriggerCreate out of device
-remove Window Init/Deinit
-move OnTriggerDestroyed out of device
--- 2022-03-29
-check Nikita crash repro: with both changes, it doesn't crash anymore
-ask ThomasD to add mips histogram: live counters
-store template shared_ptr in DrawCallType
-check staging mobile crash: network file was disabled
-think about global uniform storage: later
--- 2022-03-28
-use void for Submit/Present
-talk to Kieren about 3.17.EnginePatch on staging so we can start QA: delay by 2 weeks
-remove ChangeDevice and CreateDeviceOnLost in WindowDX
-talk to Michael about graph system
-talk to Thomas about texture streaming
-check xbox compilation
-check with Nikita about template crash (repro on pc): MichaelG changes fix it (and my template changes)
--- 2022-03-26
-add ObjectTester to StreamDeck
-use engine system in ObjectTester (use #129457)
-init job queue faster: just RADTelemetry thread name slow the fist time (buffer init?)
--- 2022-03-25
-update pc
-disable MT in tools
-update mobile
-remove mobile z-prepass workaround and check doodads: render graph not merged yet
-remove memory profiler: ok
-cleanup Initialise helpers
-remove thread profiler
-bug minimap looking faded: pass to ThomasD as it's fragment inputs related
-profile engine init with Telemetry
--- 2022-03-24
-crash in SetDialogueSfx: pass to Michael
-check that switching to DirectX11 is not slow because of disable async: compiling shaders
-clean renderer system includes and header uses
-optimize render graph generation: not really useful
-move dynamic parameters to entity template
--- 2022-03-23
-update pc
-set debug_view_mode/instances/inputs in template Gather
-remove UI only pass, and use no culling instead
-update pc
-move Blit out of render system
-move device to Impl
-move renderer settings and helpers to Impl
-remove gi_enabled
-precompute render graph: too soon (issue with pass inputs, display size)
--- 2022-03-22
-test cloud shaders on mobile: inputs parameters ordering
-add message box for when cannot connect: ThomasD
-capture mobile GPU and check passes: slightly better
-set water debug differently as scene pass uniform
--- 2022-03-21
-commit SetRendererSetttings
-talk to Rob about shader server: fine on testing (ThomasD)
-move debug view mode to entity system and invalidate draw call types
-use Type in entity callbacks
-update instance in constructor
-move instances to Type
-unit test to validate sparse vector: ask Nikita
-test cloud shaders on mobile pc client: need to use Mobile platform (but works fine)
-remove entity sparse set destructor workaround: ask Nikita
--- 2022-03-20
-revert templates changes
-remove ResetRequest
-remove graphics_capabilities
-rename RendererSettings to Renderer::Settings
-rename ModifySettings to SetRendererSettings
-add Engine::SetRendererSettings
-add Engine::GetRendererSEtttings
-move DisableAsync to engine
-move ReloadTextures to engine
-remove engine system include in renderer system
--- 2022-03-18
-reorganize stream deck
-update
-do not use deferred swap chain recreate when resizing: already done
-remove backbuffer_desc in device create
-remove wait in ResizeDevice
-disable async for one frame after some reset flags
-still glitch when switching GI
-remove entity templates
-remove scene callbacks
-move 8 functions to impl
-make render_graph private
-make RenderGraph a class
-move device uploader to engine
--- 2022-03-17
-update
-tell ThomasD about pc mobile issue
-store draw call type in context
-use simple reset device for some settings
-consolidate framerate limit flags
-remove RestartSMAA
-clean apply/set renderer setttings
-remove RestartPostProcess
-remove RestartShadow
-remove DeviceState
-remove ResetVsync (just reset swap chain)
-move simple setters up
-move smaa_high to OnReset
-test
-commit
-add a note to mobile issue
-remove common params from SetSceneData
-move UpdateAsyncResources
-talk to Chris about UI textures in RAM and bundles: bundles better, mesh streaming and smart streaming
-move DoFActive
--- 2022-03-16
-update
-test
-commit
-capture by value in sub-pass
-move post_process
-move DirectLight
-move depth aware
-move upsample
-test
-commit
-crits on testing: can't repro
-use renderer settings to enable dof render targets
-move dof data
-move pp pass
-test
-commit
-move helpers into pass function
-move gi
-move ss
-test
-commit
-move pp meta pass
-move AddWaterDrawData
-remove screen_scaling
-move AddScreenSpaceDrawData
-move remaining
-test
-commit
-move update
-move reload
-move prepare
-test
-commit
-move env settings
-test
-commit
-add mobile to roadmap and remove move stuff
-update visual studio
-crash when switching render in synthesis hideout
-move ConvertScreen to ScreenshotTool
--- 2022-03-15
-update
-test
-commit
-remove TileTextureMapper
-commit
-move ScreenspaceTracer
-move water/depth null data 
-move shadows
-move resampler
-move GI null data
-move depth
-move particle update
-remove main
-move clear
-move z-prepass
-move srgb and linear helpers
-move smaa
-move main pass
-move bloom
-move reprojection
-move downsampled g-buffer
-move cubemap
-move downsampled pass
-move depth overrider
-move desaturation
-move shimmer
-move color resampler
-move linearize depth
-move blur
--- 2022-03-14
-revert textureNull change
-merge post-process and upsample together
-add BuildWaitPass
-add BuildClearPass
-rename BuildBackbuffer to BuildPostProcess
-add BuildUIRenderToTexturePass and BuildUIPass
-test
-commit
-rename _pass to device_pass
-always SMAA (dummy) and upsample: 0.1ms
-add BuildSMAAPass
-add BuildPostProcessPass
-separate shimmer and desaturation
-update
-test
-commit
-add BuildXXXMetaPass helpers
-meeting about network file and patching: need to add tool to generate patching table and checksum
-use RenderGraph class in header/impl
-move device passes to render graph
-add RenderGraph files
-test 
--- 2022-03-13
-fix bundled builds: working fine for me, buildbot stuck?
-sync and test
-add size checks back
-merge bloom/dof and backbuffer
-move wait_for_backbuffer to pass
-remove src_target parameter from BuildBackbuffer
-test
-commit
--- 2022-03-12
-separate path for no-gi (no need to separate passes since all using single RT)
-update
-test
-commit
-warmup/skip pass based on clear or not
-add debug name to Pass and BeginEvent
-remove resolution_scale parameter
-remove unused pass profile enums
-remove some unused files
--- 2022-03-11
-update
-test
-commit
-move command buffer find to MetaPass
-use abyss to test depth override: /abyss
-remove count from post-process
-remove count from z-prepass
-remove count from shadows
-test
-use sub-pass for cubemap
-remove BEGIN_COLOUR from cubemap
-remove has_main_pass
-remove count from main passes
-add BuildDownsampledWaterPass
-remove UsesDownsampledWater helpers
-test
-remove ListGetCount
-compare GPU cost: about the same
-commit
-remove blend mode from GetMainPass
-use sub-pass for main
-remove BEGIN_COLOUR from main
-remove BuildMainPass
-remove clear_color
-test
-commit
-move parameters to BuildXXXPass
-merge IsMainPass
-test
-commit
-merge downscaled sub-passes
-test
-commit
-check meta-pass count (GI vs no GI): 41 vs 30
-add AddMetaPass to System (return MetaPass&)
-add AddPass to MetaPass(return MetaPass&)
-consolidate meta-pass
--- 2022-03-11
-use MetaPass instead of RenderJob
-avoid unique_ptr in meta_passes
-test
-update
-test
-commit
-separate pass main into opaque/downscaled/transparent
-add IsDownscaledPass(blend_mode)
-add IsOpaque/TransparentPass(blend_mode)
-remove WETNESS_PASS define
-make issue for ThomasD for using main RAM as texture streaming budget
-separate wetness pass from opaque
-separate downscaled passes
-separate compute pass
-separate water pass
-remove main clear helpers
-move this dyn res variables to prepare jobs
-remove BEGIN_DOWNSCALED
-test
--- 2022-03-10
-pass command buffer to callback
-Nikita sick leave
-test
-commit
-change minimap test script to other test case
-clear shaders in script prior
-update
-bug minimap not showing landscape: disable throttling
-check staging_mobile not compiling (AddDebugInstances)
-bug synthesis effect in boss fight: pass to Thomas
-add RenderPass
-add MetaPass
-bug cubemap generation not working: keep cubemap_task alive
--- 2022-03-09
-update
-test
-commit
-check in with Thomas and move stuff out of 3.17.EnginePatch
-add callback to Pass
-crash in UI for Guy: capture pass by value
-factorize wait for backbuffer
-store Pass in RenderJob
-factorize Record (no virtual)
-remove unused variables
-remove defines
-use struct for RenderJob sub-classes
-rename Render to Flush
+test
	minimap
--- 2022-03-08
-day off
--- 2022-03-07
-commit
-check in with Michael: ask Kane to migrate fmod, 4.0 minor issues, audio dialogue manager
-check in with Nikita: xbox VMA, validate descriptor ring buffer fix, repro xbox artefacts
-day off for ThomasD
-checkout and build mobile_alpha
-check mobile_alpha startup bug: wrong mobile_alpha (internal) port, asked Robert to sort it out
-make sub-pass accept function
-consider using std::move for AddSubPass
-store sub-passes in passes
-move pass Begin/End to Render
-remove draw call count booleans
-remove last from RenderJob
-test
-bug with missing doors on tile sheeets: bump version number
--- 2022-03-06
-update
-commit
-create pass in constructor
-use pass_inputs from pass
-add BuildXXXPass helpers
--- 2022-03-05
-update pc
-bug asset viewer flashes when tweaking: use parallel
-bug minimap renderer is black: use parallel
-move stuff from SubPass to Pass (inputs, pass, command buffer), and use Pass as parameter to Render
-remove HRESULT from ScreenSpaceTracer helpers
--- 2022-03-04
-count active draw call types (percentage)
-display system usage as bar too
-make load programs use one job on low-core too (add setting)
-test with low cache size
-limit thrashing by cache size * 4
-sync Thomas changes: point lights issue
-remove previous_shader
-better shader system usage
-crash Mobile alpha: Thai language is missing, Robert will check
-sync mobile again
-state changes for new Vulkan SDK
-disable profile Vulkan on APPLE
--- 2022-03-03
-ask Nikita about unit test being commented out in 191503: restore
-use fallback too in Find
-use SetShaderSkip to enable on client only
-more Renderer.cpp to render system
-test and commit
-crash with binding sets
-crash with /loadtest: see if handles fix did the trick
-use struct for Renderer.cpp function SubPass
-Renderer::Pass
-checkout mobile
-sync mobile
-render still crashing, but on uniform buffer cache now 
-do not store shaders in pipeline: keep pipeline alive on stack
-crash on resize: check depth is null
--- 2022-03-02
-add Find that check if type is ready
-check color pass in z-prepass
--- 2022-03-01
-disable async for one frame after resize? doesn't work
-update pc
-commit removals
-crash when changing from windowed to windowed fullscreeen: rate-limit?
-rate limit program and pipeline jobs
-crash when loadtest: store pipeline handle in context?
-reduce cache size to 2k to reduce descriptor allocation count
-use handle in context
-no load program jobs on consoles: KickPrograms
-update next
-bug vertex animation trees on g3-3: can't repro
-factorize reload shaders
-move ReloadXXX to engine system
-do not store pipeline in DrawCallType
--- 2022-02-28
-crash xbox D3D12: increase heap for now
-console crash in recreate physics: Thomas will try deferring create (see Alexander)
-remove default shaders in base gatherer: ask ThomasD
-remove Finalize and hash as we go
-gather depth only for z-prepass
-factorize GetMainClearColor
-use simd::color instead of DWORD
-pass clear color as render parameter
-remove RelinkShaders
-remove ReloadShaders
-remove old resource cache ReloadTextures
--- 2022-02-27
-bug affliction town boss shader: override blend mode for base too (animated)
-check that color draw call type is ready before readying z-prepass: can't, pass is not the same
-remove default shaders
-remove over-warmed blend modes: not great
--- 2022-02-25
-update pc
-cloud shadows shifting too quickly: pass to Alexander
-warmup default shaders and pipelines
-remove debug view mode from shader desc
-move 2x Fetch in FindOrCreateOrBind to DrawCallType
-remove draw call type name
-remove is_default from shader desc
-remove notion of base graph
-default template like fallback
-warmup object inputs
--- 2022-02-24
-update pc
-wait for shaders when switching renderer: disable async and delay
-display warmed-up as percentage
-make sure QoS histogram is correct
-factorize GetMainPass
-display type counts
-warmup default
-pass to Michael the new fmod libs on macos/ios
-update pc
-console crash in recreate physics: try clearing physical representation
--- 2022-02-23
-rename FindHandles to Fetch
-plug other warmups
-rename base to shader_base  
-compare no warmup at all: .250/.500 to .130/.300
-measure type warmup
-update pc
-commit
-sign tarot cards: next week maybe (Chris) 
-wait for color when z-prepass: can't, need color pass in z-prepass pass
-profile ST CPU render: nothing worse (params creation a little slower ~0.1ms)
-crash when resizing in D3D12: clear pipelines
-warmup particles/trails when effect instance is created
-slow loading when warming up pipelines: 1-5-3b: 3s to 5s (driver cache)
-VMA memory leak when exiting after resizing: make issue to Nikita
-compare with WoT: disk 27GB vs 59GB, memory 3.3GB vs 1.8GB, loading 3s vs 15s
-use ImGui for culling debug menu: pass to ThomasD
-ask the guys about dyn res target FPS: later
-bug low res water: fix clear color
-crash Nicholas's: can't repro, disconnected instead (passing back)
-bug outline color is black in character selection for some: clear_color name shadowing
--- 2022-02-22
-display build bot on second screen
-check timed trail feature with Thomas: ok to do
-separate pipeline from DrawCallType
-store pipelines and find using desc
-add pipelines stats and QoS
-asset viewer uniform issue: add renderer clear
-add async setting to renderer system
-move pipeline job to renderer
-rename Desc into Params
-use Desc for Pipeline
-add warmup setting
-bug asset viewer memory leak: do not clear lines
-add warmup function
-use handle for pass
-store Desc in pipeline
-warmup pipelines in Update: 0.3ms
-use Shader::Base in Renderer::Base
-count warmed-up
-warmup bases
--- 2022-02-21
-update pc
-ask Nikita about constant alignment on D3D12 (256 too big, 16 on my Vulkan)
-check string pool crash when mapping: increase EffectGraphFilenames to 2MB
-check ps4 startup crash: pass to Thomas (missing nullptr check)
-talk to Michael about what's next: effect graphs cleanup
-move DrawCallType to render system (use impl)
-remove template from DrawCallType: slow
-check 3.17.x issues: just one Nikita one
-rename type_desc
-separate Device::Attachments from Device::Pass: can't (gather needs clear infos)
--- 2022-02-20
-commit load pipeline (saves 3% render time)
-commit local constant blocks (saves 10% render time when >4 cores)
-add types buckets
-compare performance with staging (ST/MT): 6.2/11.0 to 4.9/6.5 (x1.25/x1.69)
-measure real warmup utilization (count only used draw call types)
-make sure shader base properly uses overriden blend mode
-send timesheet
--- 2022-02-19
-set qos range from 0 to 1s
-use only past 10s for qos
-sync 
-commit qos
-pass Device::Pass to DrawCallType
-check shader system contention in toxic rain char: most of it comes from global CB allocate
-improve global CB contention
--- 2022-02-18
-cleanup C drive: uninstall LostArk
-update next
-update pc
-when z-prepass wait for color: don't bother for now
-check mobile bundles not generating: device null 4GB 
-ask ThomasD to check xbox shaders again (still not there)
-make an issue to implement stupid mode (performance hints)
--- 2022-02-17
-update pc
-sync mac 
-plug imgui on mac
-disable ImGui viewports on mac
-check with Nikita about animation streaming
-update next
-make build script for next: bundles 28GB vs 55GB
-generate bundles doesn't work on next: set avail/total VRAM to 4GB (< 8GB)
-check shaders and shader cache on next: ok, some shaders missing (as expected)
-test performance with bundles on next: ok
-move next to C
--- 2022-02-16
-crash in prod in ClientTelemetry: pass to Nikita
-ask MichaelG to figure out that export timeout: after updating fmod
-check FMA and memory budget
-ask Arthur about Mac QA: do more regular testing, and buy mac (?)
-move object binding inputs to DrawCallType: 10% faster
-talk to Nikita about league performance review
-test with no particle merging: merge/render from 1.0/5.0 to 1.3/5.6
-profile render: 5% object uniforms find, 30% bind descriptor set
-fix login MT crash: missing IsReady check
-test with shader cache: still some missing wait between z-prepass and color
-prefetch binding set but waiting until resources are ready: buggy
-prefetch pipeline in Load: can't, too soon
--- 2022-02-15
-test mobile with smaller chunk size (256 MB to 64 MB): all good, 1.41 GB (was 1.36 GB)
-have Thomas have a look at network file crash on mobile
-check mobile staging audio: build issue
-update pc
-commit shader preload changes
-tell AlexQA about commit and global/local preloading
-super slow present sometimes: network bandwidth
-pass device to draw call type and prefetch pipeline_uniform_buffer
-rate limit draw call types to survive when cache overflow: 30MB increase
-talk to Thomas about shaders not being in the build: base gather fix and ffx changes
-move DrawCallType and types to Renderer::System: later (need it to have a proper impl)
-warmup textures too: touch binding inputs in Finalize
--- 2022-02-14
-remove caches hit-rate (useless)
-add Renderer::Desc and use it in DrawCallType
-LoadType and DrawCallType::Load
-lock type when Load
-add type QoS
-remove LoadPrograms and LoadProgram when find
-Shader::Update as a high job
-move SetWarmup to engine settings
-measure type qos only if ready
-animated
-remove missing shader warmup message
-too many shaders loaded from drive: not in cache (same count if not warming up)
-update and check if can repro Nikita's all dark issue: can't repro
-talk to AlexD about global vs local preloading: remove as much from preloading as he can
-test Nikita's VMA patch: ok on mac
--- 2022-02-12
-check that all shaders come from the cache in town in dev: skip some blend mode/shader pass
-move Desc to impl
-do not warmup default
-update
-remove async from Shader::Desc
-commit
-count warmed up
-particles
-trails
-wait for all jobs in GarbageCollect, and SetWarmup
-check bandwidth: better, peaks at ~100KB/s
-measure cache rates (reset every 100k)
-ground/terrain
-do not clear shader system when GC
--- 2022-02-11
-use callback for next_frame
-add wait-on to hash
-use Shader::Desc in warmup
-remove descs
-wait for opaque before using depth: later
-count programs (depth, color, rays)
-crash in pregame state: try setup scene
-check lighting on next (Josh UpdateLights null guard, but glitches?): ok
-add RAM: 128GB at 3600MHz
-update pc
-sync staging1
-compare with staging QoS (staging1 is prod): mostly the same 0.5s/1.0s (even if loading from drive)
--- 2022-02-10
-dl lost ark
-use spin mutex: same
-move shadow_pass out of library
-remove old warmup and do it at template time
-do not update entity render if not visible
-add SetWaitOn to template to fix outline
-draw call type contention: just too small LRU (4k is enough)
-put back UI on main thread again (tencent cursor issues)
-add shader wait in login scene
--- 2022-02-09
-make sure job profile shader and pipeline are separated: yes
-update pc to get ThomasD changes
-add Shader::Library that contains Shader::Program (tuple of Device::Shader)
-move library to shader system
--- 2022-02-08
-check 3.17.Important/X issues
-follow-up with Michael about small audio issues (console, Piety)
-no sound in AssetViewer on trunk: SetDevice later
-generate bundles
-move init job queue to engine system: told JonathanK
-move audio init to engine settings
-move debug layer to engine settings
-move bundle2 init to engine
-fix TileTestBed crash when selecting generation log: add null guard
-move Reduce to engine
-move Job::Profile to engine
-check mobile audio issue with Michael: no issue made 
-make mobile build to check audio: add FMOD prefix
-limiter appears first in profile: move swap first
-move changes back in
--- 2022-02-06
-update
-commit shader jobs
-commit remove FixedMeshInstance
--- 2022-02-05
-check league launch callstacks
-audio table load crash: add Init function
-tile sheet creator crash after audio change: init engine later
-test other tools
--- 2022-02-04
-remove job warmup
-move warmup to finalize
-talk to Michael about audio cutting on consoles
-remove FixedMeshInstance
-move finalize to call site
-use jobs to load shaders from cache
-use jobs for LoadProgram
-clear render entity templ
-slow entities in maps: way faster with visibility thing, so don't care?
-check visibility before adding batch in Render()
--- 2022-02-03
-update pc
-merge LoadFromBuffer inside instance constructor: good to go, have Michael commit next week
-renew sony credentials
-check sony policy email
-replace env warmup with prefetch basic DrawCallType in Template
-use shared_ptr for template
-make issue to increase dyn res target framerate
-do not finalize when storing fallback
-use job to finalize template when push
--- 2022-02-02
-dyn res with Nikita: GPU throttling? timestamps also count GPU 'inactivity'
-new bundling with Thomas: add open count, and check reset
-ask QA for video/infos about shader lag: he'll ask other QAs if they can repro
-ask to unstuck ps4-testing: Thomas did it
-update PC
-decal buffer crash sometimes
-make sure shader QoS measure template to pipeline latency: ok
-use rate limit to evaluate shader system usage
-count creation of programs, shaders and pipelines
-use histogram to display QoS
--- 2022-02-01
-update pc (revert outline graph changes)
-asked level designers about fog in TileTestBed
-add SetEnvironmentSettings to Renderer/Scene/Audio and Engine
-crash (console only?) in physics in Blight (staging only): add isInitialised test
--- 2022-01-30
-sync xbox-staging2: can't 
--- 2022-01-29
-better template fallback: use full template chain
--- 2022-01-28
-update pc
-decide what's next for Thomas: bundle locality and loading time, ImGui on consoles/mac 
-watch livestream
-move EnvSettings::Data outside and remove includes
-ask Adam about RADTelemetry folders on shared
-talk to AlexD about epk and shader warmup
-factorize player light in scene
-group env settings funcs that are in all tools
-quickly check if we can do a better template fallback selection: nope
--- 2022-01-27
-check that mac fix is out: yes
-make issue for phyisics MT crash
-update PC
-factorize audio global state in audio
-factorize ambient sounds in audio
--- 2022-01-26
-update PC
-crash on mac Intel: align matrices
-client bandwidth super high: ThomasM is investigating
-bug asset viewer particle emitter init pos: just update ImGui first
-factorize audio global state in audio
-move SoundSource back to Visual
-revert and move back Audio to Visual
--- 2022-01-25
-try repro doodad crash when reproing light bug: can't 
-check with Thomas about bandwidth display: need to run as admin
-check that changing audio setting doesn't restart: ok
-remove ClientGameWorldFrameMoveSimulationDeferredEnd
-check fixme for crashes
-same CreateDoodadBuffer crash: do not store device in DoodadLayerManager
-check crash CreateDoodadBuffer: check scene_setup
-factorize directional light in scene
-factorize global particle effect
-cleanup includes in scene system
-bug asset viewer material reload: update ImGui first
--- 2022-01-24
-check with Kieren about 3.17.EnginePatch commits: he'll merge them to 3.17
-confirm with BenQA that the lighting bug doesn't happen on staging4 (3.17.0)
-remove Changed helpers in various apps
-use scene time_draw_data (frame_time) instead of time
-check with BenQA that it really doesn't happen on testing: it does
-ask Alexander about lightning (needed? broken atm, normal color is wrong too): keep broken if commit now
-audio stacking bug: pass to Michael
-try repro env light bug on testing too: scene_setup in EnvironmentChanged (matches old behavior)
--- 2022-01-23
-move environment settings to scene: requires game object: location and quest ratio (annoying)
--- 2022-01-21
-sync pc
-clean light.h includes
-crash in doodad buffer creation: can't repro on testing/staging2
-wrong env light in some cases: can't repro on testing/staging2
-build staging2
-sync pc
-make a Telemetry capture to check fence gaps: all good
-keep trying to repro crash using templar build: nope
-check environment settings being applied in parallel or something: all good, done in NextFrame
-make issue for next league to use remote heap in Vulkan on AMD APUs
-check vsync bug (always applied even if disabled): just Nvidia setting
--- 2022-01-20
-update pc
-commit light changes
-kick FrameMoveBegin and FrameRenderBegin jobs
-kick shader and render update jobs
-remove GetTime
-remove SetFrameTime
-move debug frustum from VisibleObject to Light
-lights as entities? not really, entity == draw call
-mobile staging bundle error: get bundle name?
-remove lone orphaned manager clear: later
--- 2022-01-19
-update pc
-bug asset viewer physics mesh not following: update physics after tool move
-merge FrameRenderBegin/End as well
-check with Thomas his 2 console issues
-talk to Michael about trail FPS issue: new issue it seems
-sync mac
-update stb_image
-mac cursor is a square: revert bmp files
-add physics system usage and display
-always bind tiled_lighting inputs
-cleanup visible light functions
-remove cached point lights
-remove RenderSwap/ScreenSpaceTracer/PrepareRenderJobs profile tag
--- 2022-01-18
-click_sound assert: pass to Michael
-set shadow type like light quality
-get frame size from inside scene OnResetDevice
-ask Rachel about console engine patch (3.6.3 is ready on pc): starting on it
-move fence outside scene
-move scene device create out of render system
-move animation out of scene update
-switch to 3.17.EnginePatch for following commits: told Kieren
-make physics a system
-factorize GetFrameSize in Device
-fix Client 3.16.3 compilation: old InGameState code
-remove more GetBackbufferDesc
-remove shader system from scene system
-check mobile build: renderer properly not there
-check TabContainer warning with BenUI: ok
--- 2022-01-17
-resolve Nikita DirectX12 issue: resolved (make DX12 pc issue)
-try reproing asset viewer log window crash
-check Michael dialogue issue: Nicholas is taking over
-check Michael parameter tracking issue: move to next league for Kane
-consider using better animation memory pool: only 200 allocs
-check Alexander Vulkan VRAM bug: check with Thomas
-test asset viewer resize making things disappear: use old scene_setup
-engine swap and garbage collect (during loading screen)
-remove ShadowsEnabled
-talk with Thomas and Alexander about necessary UI changes for GPU particles: add UI 
-move cubemap manager to scene
-move shadow manager to scene
-move scene update out of render system
-remove obsolete RestartLighting
--- 2022-01-14
-check missing 3.16.3 commits for engine patch
-update PC
-do not store scene manager in classes 
-assert during freeze the client
-crash UI in HUD
-remove from SetupSceneObjects
-rename Scene::SceneManager to Scene::System
--- 2022-01-13
-crash in predictive (UI?) and using cheats: use (0, 0) for now
-move full_bright to Shader::System option, and remove renderer_settings from DrawCallType
-move draw_call_type_manager to Shader::System
-remove RendererSystem::SetFrameTime
-make scene_manager a system
--- 2022-01-12
-crash on xbox (related to UI?): pass to Nikita for repro
-remove deprecated shader options
-remove --no-gi from ps4 build
-move fragment_linker to ShaderSystem
-move Shader::System OnCreateDevice to engine system
-build client on ps4-testing (with pc assets)
-check console bundles failing sometimes: null renderer UI render infinite loop
-update audio system as low job: next patch
-check with Michael about reverb again
-update pc
-check fixme with UI crash: only yesterday showed some
--- 2022-01-11
-crash on login: can't repro, try moving Debug back
-crash on waypoint: add nullguard in GetPhysicsSystem, move Debug back
-check with Michael and Kane about reverb: understand volume and reverb
-update audio system inside render system
-add engine FrameMove and FrameRender 
-use engine in other tools
-add engine OnCreateDevice
-factorize what we can inside engine OnXXXDevice
-remove extraneous DeviceUploader in tools
-clean FragmentLinker::AddFragmentFiles
-check PassiveSkillScreenEditor build crash
-remove ClearShaders
-check that all changes clear the build
--- 2022-01-10
-talk with Nikita: small bugs, and console performance tests
-talk to Michael: small bug, remove old, threshold
-test on mac with Asan
-do not use lock free fifo for entity commands
-update PC
-wait for minimap job: no, too slow and should be independent
-commit UI changes: talk to Ben/Rupert/AlexN/Engine
-console engine patch date? ask Rachel: will try to
-profile CPU on mac: render 50% moltenVK overhead
-check revert bug with Michael: ask Kane first and discuss later
-hang when using --python: disable Debug job
-fix mobile PC client not patching: use __APPLE__iphoneos
-profile passive skill tree record: commands huge >50%, rest is slow math and parent fetching
--- 2022-01-08
-commit prod compilation fixes
-fix staging generate bundles with null renderer: shader gather missing case
-kick record after update
-check random crash when generating bundles: seemingly fixed by update/record change
-apply changes on mac
--- 2022-01-07
-staging crash asset dependency tool: SSD issue
-review more audio after desc init changes
-final review audio with Michael
-move physics and debug back together
-keep record at the same time as update for now
-remove InitAudio profile tag and add Sound tag
-remove AudioUpdater
-move debug to a job
-test tools: RoomEditor, AssetViewer
-test juicedmap with actual play on pc
-bug where interpolate/flush becomes slower: do not clear entity command stacks
--- 2022-01-06
-try not updating some UI: no changes
-review Audio changes with Michael: instance pointew state
-parallelise UI tree
-move physics after interpolate and before entities
--- 2022-01-05
-check engine patch release date: 3.17 on Feb 5th, engine patch Jan 26th
-update pc
-crash when resizing log window in game: can't repro
-crash in boss fight sound event: pass to Michael after adding guard
-shader compiler on ps4 not serving anymore: have Adam restart it (starts acting up after a month?)
-fix fmod staging/prod compilation: missing ((void)0)
-add more UserInterface profile tags
-check remaining small audio features with Michael
-ask Kane if he has any sound bugs
-remove old Renderer refs from Visual project
--- 2021-12-31
-fix xbox compilation
--- 2021-12-30
-check console build: can't repro
-mac build
-commit compile fixes for tools GUI on non-Windows
-commit FileSystem changes
-remove hardened runtime to debug
-identify which pass takes a long time on mobile GPU: regular opaque pass
--- 2021-12-29
-check console build breaks: check on PC (only have bundles on console builds)
-plan: PoE2 2023 (95% coders on it), next-gen consoles same time (end of 2022), mobile same time
-update trunk
-add DX12 device unit test
-merge Renderer into Visual library
-remove old Renderer library
-fix macos build: remove references
--- 2021-12-23
-check mobile biggest GPU allocs: most of them comes from render targets
-do mobile GPU capture to check VS/PS parallelisation: ok, one fragment job is large though
-mobile CPU dynamic resolution: tried cpu time, but not stable, ugly
-update PC
-check mac scale factor, maybe do the same on mobile as some point
-fix bundle2 data in memory bar: just use Bundle2Data tag
